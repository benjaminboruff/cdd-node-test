#!/usr/bin/env node

/**
 * Module dependencies.
 */
var express = require('express');
var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

// http front
httpApp = express()

var options = {
  key: fs.readFileSync('/opt/certs/example.com.key'),
  cert: fs.readFileSync('/opt/certs/example.com.crt')
};

/**
 * Get port from environment and store in Express.
 */

 /**
  * Create HTTP server.
  */

var unsecure_port = normalizePort(process.env.PORT || '3000');
var secure_port = normalizePort('443');


httpApp.set('port', unsecure_port);
httpApp.get("*", function (req, res, next) {
  var hostname = ( req.headers.host.match(/:/g) ) ? req.headers.host.slice( 0, req.headers.host.indexOf(":") ) : req.headers.host
  console.log(("The hostname is: " + hostname));
  res.redirect("https://" + hostname + ":" + secure_port + req.path);
});
var server = http.createServer(httpApp);
server.listen(unsecure_port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create HTTPS server.
 */

app.set('port', secure_port);
var secureServer = https.createServer(options, app);
secureServer.listen(secure_port);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(unsecure_port);
// secureServer.listen(secure_port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
